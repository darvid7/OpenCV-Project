Build an image search engine, from start to finish, using The Hobbit and Lord of the Rings screenshots.

link:http://www.pyimagesearch.com/2014/01/27/hobbits-and-histograms-a-how-to-guide-to-building-your-first-image-search-engine-in-python/

some notes:

- a histogram represents the distribution of colors in an image

- visualized as a graph (or plot) that gives a high-level intuition of the intensity (pixel value) distribution

- assume a RGB color space in this example, so these pixel values will be in the range of 0 to 255.
If you are working in a different color space, the pixel range may be different.

- X-axis serves as our “bins”. If we construct a histogram with 256 bins,
then we are effectively counting the number of times each pixel value occurs

- In order to use color histograms in image search engines,
we make the assumption that images with similar color distributions are semantically similar.

colour histograms: http://www.pyimagesearch.com/2014/01/22/clever-girl-a-guide-to-utilizing-color-histograms-for-computer-vision-and-image-search-engines/

a draw back:
color histograms, by definition ignore both the shape and texture of the object(s) in the image.
This means that color histograms have no concept of the shape of an object or the texture of the object

 different categories for different types of clothes, such as shoes and shirts.
 If I were using color histograms to describe a red shoe and a red shirt,
 the histogram would assume they were the same object.

 Clearly they are both red, but the semantics end there — they are simply not the same.
 Color histograms simply have no way to “model” what a shoe or a shirt is


 Can use this to show a bee possibly ?

 Thus, more robust methods include local invariant descriptors, such as SIFT, SURF (in OpenCV)